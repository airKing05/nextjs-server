I am new in MongoDB schema design as well as backend development, please provide me with a better solution to the schema design.

I want to make a rest full API to store all information of products, I want to see my API like this formate. 
whereas product_category contain the array of product categories name, category_items contain all products with their information like image, and prices- so assume that the price of every individual product is changing per day, every city and every market has different-different prices of each and every product and I want to show prices of every day into front-end side on my website.
The price array could massive. 


```
[
{
  "city": "miami",
  "state": "florida",
  "market_name": "xyz",
  "product_category": [
    {
      "category_name": "speaker",
      "category_items": [
        {
          "item_name": "bluetooth speaker",
          "item_image": [
            {
              "image_url": "img-url-1"
            },
            {
              "image_url": "img-url-2"
            }
          ],
          "item_price": [
            {
              "date": "20/01/22",
              "minimum_price": "180",
              "maximum_price": "200"
            },
            {
              "date": "21/01/22",
              "minimum_price": "190",
              "maximum_price": "202"
            },
             {
              "date": "22/01/22",
              "minimum_price": "170",
              "maximum_price": "200"
            }
          ]
        },
    
        {
          "item_name": "normal speaker",
          "item_image": [
            {
              "image_url": "img-url-1"
            },
            {
              "image_url": "img-url-2"
            }
          ],
          "item_price": [
            {
              "date": "20/01/22",
              "minimum_price": "130",
              "maximum_price": "150"
            },
            {
              "date": "21/01/22",
              "minimum_price": "120",
              "maximum_price": "130"
            },
             {
              "date": "22/01/22",
              "minimum_price": "125",
              "maximum_price": "135"
            }
          ]
        },
       
      ]
    },


{
      "category_name": "headphone",
      "category_items": [
        {
          "item_name": "nackband",
          "item_image": [
            {
              "image_url": "img-url-1"
            },
            {
              "image_url": "img-url-2"
            }
          ],
          "item_price": [
            {
              "date": "20/01/22",
              "minimum_price": "100",
              "maximum_price": "150"
            },
            {
              "date": "21/01/22",
              "minimum_price": "90",
              "maximum_price": "100"
            },
             {
              "date": "22/01/22",
              "minimum_price": "80",
              "maximum_price": "90"
            }
          ]
        },
    
        {
          "item_name": "TWS",
          "item_image": [
            {
              "image_url": "img-url-1"
            },
            {
              "image_url": "img-url-2"
            }
          ],
          "item_price": [
            {
              "date": "20/01/22",
              "minimum_price": "200",
              "maximum_price": "300"
            },
            {
              "date": "21/01/22",
              "minimum_price": "180",
              "maximum_price": "250"
            },
             {
              "date": "22/01/22",
              "minimum_price": "225",
              "maximum_price": "235"
            }
          ]
        },
    {
          "item_name": "wired headphone",
          "item_image": [
            {
              "image_url": "img-url-1"
            },
            {
              "image_url": "img-url-2"
            }
          ],
          "item_price": [
            {
              "date": "20/01/22",
              "minimum_price": "30",
              "maximum_price": "40"
            },
            {
              "date": "21/01/22",
              "minimum_price": "20",
              "maximum_price": "25"
            },
             {
              "date": "22/01/22",
              "minimum_price": "25",
              "maximum_price": "35"
            }
          ]
        },
       
      ]
    }

  ]
},


 {
  "city": "Houston",
  "state": "Texas",
  "market_name": "abc",
  "product_category": [ so on...]
}, 

]
```

I have created product Schema modal like this way, 
in productSchema.js
note: - I am hard coding date here


```
const mongoose = require('mongoose');

const requiredString = {
    type: String,
    required: true
};

const item_priceSchema = new mongoose.Schema({
    date: {
        type: String,
        default: Date.now
    },
    minimum_price: requiredString,
    maximum_price: requiredString
});

const category_itemsSchema = new mongoose.Schema({
    item_name: requiredString,
    item_image: [{
        image_url: requiredString
    }],
    item_price: [item_priceSchema]
});

const product_category_nameSchema = new mongoose.Schema({
   category_name : requiredString,
   category_items : [category_itemsSchema]
});

const productSchema = new mongoose.Schema({
    city: requiredString,
    state: requiredString,
    market_name: requiredString,
    product_category: [product_category_nameSchema]
});

const Product = mongoose.model('PRODUCT', productSchema);

module.exports = Product;

```

I have created post API route like this
in product.js product schema modal is imported here
```
const express = require('express');
const route = express.Router();
const Product = require('../model/productSchema');


route.post('/fake-details', async (req, res) => {
    
    try {
        const product = await Product.create(req.body);
        if (!product){
            res.status(400).json({message: 'unable to save product details to Database'});
        }
        else{
            res.status(201).json({message: 'product successfully cerated to the Database'});
        }
    } catch (error) {
        res.status(500).send("internal server error")
        console.log("Error==>", error)
    }
 

    
})

module.exports = route;
```
posting data in postman like this
```
{
  "city": "miami",
  "state": "florida",
  "market_name": "xyz",
  "product_category": [
    {
      "category_name": "speaker",
      "category_items": [
        {
          "item_name": "bluetooth speaker",
          "item_image": [
            {
              "image_url": "img-url-1"
            },
            {
              "image_url": "img-url-2"
            }
          ],
          "item_price": [
            {
              "date": "13/01/22",
              "minimum_price": "180",
              "maximum_price": "200"
            },
            {
              "date": "13/01/22",
              "minimum_price": "190",
              "maximum_price": "202"
            }
          ]
        }
      ]
    }
  ]
}
```

get resultant in MongoDB atlas. 
[product API in MongoDB atlas][1]
so this API look complecated, I also want it to update

please provide the suitable schema design (relational/mapping schema design) of this post API, and How to post all the data using postman? 
How could I manage this price array, I mean according to MongoDB the collection size could not be greater than the 16MB. I am sure that someday my product collection will meet 16MB because each product have their own price array and that's are increasing per day?   

  [1]: https://i.stack.imgur.com/GCVhK.png